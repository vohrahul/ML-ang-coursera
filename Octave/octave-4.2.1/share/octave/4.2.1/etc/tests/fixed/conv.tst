## !!! DO NOT EDIT !!!
## THIS IS AN AUTOMATICALLY GENERATED FILE
## modify build-conv-tests.sh to generate the tests you need.


%!shared r,dq,sq,b,bm,dm,cdm,fdm,fcdm,pm,sm,sbm,scm,s,m,cs,cm,fs,fm,fcs,fcm,i8s,i16s,i32s,i64s,i8m,i16m,i32m,i64m,ui8s,ui16s,ui32s,ui64s,ui8m,ui16m,ui32m,ui64m
%!test
%! r = 1:5;
%! dq = "foo";
%! sq = 'bar';
%! b = true;
%! bm = rand (5) > 0.5;
%! dm = eye (5);
%! cdm = eye (5) * i;
%! fdm = eye (5, "single");
%! fcdm = eye (5, "single") * single (i);
%! [~, ~, pm] = qr (rand (5));
%! sm = sprand (5, 5, 0.1);
%! sbm = sparse (rand (5) > 0.5);
%! scm = sprand (5, 5, 0.1) * i;
%! s = rand ();
%! m = rand (5);
%! cs = 13 * i;
%! cm = rand (5) * i;
%! fs = rand ("single");
%! fm = rand (5, "single");
%! fcs = rand ("single") * single (i);
%! fcm = rand (5, "single") * single (i);
%! i8s = int8 (rand () * 10);
%! i16s = int16 (rand () * 10);
%! i32s = int32 (rand () * 10);
%! i64s = int64 (rand () * 10);
%! i8m = int8 (rand (5) * 10);
%! i16m = int16 (rand (5) * 10);
%! i32m = int32 (rand (5) * 10);
%! i64m = int64 (rand (5) * 10);
%! ui8s = uint8 (rand () * 10);
%! ui16s = uint16 (rand () * 10);
%! ui32s = uint32 (rand () * 10);
%! ui64s = uint64 (rand () * 10);
%! ui8m = uint8 (rand (5) * 10);
%! ui16m = uint16 (rand (5) * 10);
%! ui32m = uint32 (rand (5) * 10);
%! ui64m = uint64 (rand (5) * 10);
%!
%!assert (typeinfo (r), "range")
%!assert (typeinfo (dq), "string")
%!assert (typeinfo (sq), "sq_string")
%!assert (typeinfo (b), "bool")
%!assert (typeinfo (bm), "bool matrix")
%!assert (typeinfo (dm), "diagonal matrix")
%!assert (typeinfo (cdm), "complex diagonal matrix")
%!assert (typeinfo (fdm), "float diagonal matrix")
%!assert (typeinfo (fcdm), "float complex diagonal matrix")
%!assert (typeinfo (pm), "permutation matrix")
%!assert (typeinfo (sm), "sparse matrix")
%!assert (typeinfo (sbm), "sparse bool matrix")
%!assert (typeinfo (scm), "sparse complex matrix")
%!assert (typeinfo (s), "scalar")
%!assert (typeinfo (m), "matrix")
%!assert (typeinfo (cs), "complex scalar")
%!assert (typeinfo (cm), "complex matrix")
%!assert (typeinfo (fs), "float scalar")
%!assert (typeinfo (fm), "float matrix")
%!assert (typeinfo (fcs), "float complex scalar")
%!assert (typeinfo (fcm), "float complex matrix")
%!assert (typeinfo (i8s), "int8 scalar")
%!assert (typeinfo (i16s), "int16 scalar")
%!assert (typeinfo (i32s), "int32 scalar")
%!assert (typeinfo (i64s), "int64 scalar")
%!assert (typeinfo (i8m), "int8 matrix")
%!assert (typeinfo (i16m), "int16 matrix")
%!assert (typeinfo (i32m), "int32 matrix")
%!assert (typeinfo (i64m), "int64 matrix")
%!assert (typeinfo (ui8s), "uint8 scalar")
%!assert (typeinfo (ui16s), "uint16 scalar")
%!assert (typeinfo (ui32s), "uint32 scalar")
%!assert (typeinfo (ui64s), "uint64 scalar")
%!assert (typeinfo (ui8m), "uint8 matrix")
%!assert (typeinfo (ui16m), "uint16 matrix")
%!assert (typeinfo (ui32m), "uint32 matrix")
%!assert (typeinfo (ui64m), "uint64 matrix")
%!
%!assert (class (r), "double")
%!assert (class (dq), "char")
%!assert (class (sq), "char")
%!assert (class (b), "logical")
%!assert (class (bm), "logical")
%!assert (class (dm), "double")
%!assert (class (cdm), "double")
%!assert (class (fdm), "single")
%!assert (class (fcdm), "single")
%!assert (class (pm), "double")
%!assert (class (sm), "double")
%!assert (class (sbm), "logical")
%!assert (class (scm), "double")
%!assert (class (s), "double")
%!assert (class (m), "double")
%!assert (class (cs), "double")
%!assert (class (cm), "double")
%!assert (class (fs), "single")
%!assert (class (fm), "single")
%!assert (class (fcs), "single")
%!assert (class (fcm), "single")
%!assert (class (i8s), "int8")
%!assert (class (i16s), "int16")
%!assert (class (i32s), "int32")
%!assert (class (i64s), "int64")
%!assert (class (i8m), "int8")
%!assert (class (i16m), "int16")
%!assert (class (i32m), "int32")
%!assert (class (i64m), "int64")
%!assert (class (ui8s), "uint8")
%!assert (class (ui16s), "uint16")
%!assert (class (ui32s), "uint32")
%!assert (class (ui64s), "uint64")
%!assert (class (ui8m), "uint8")
%!assert (class (ui16m), "uint16")
%!assert (class (ui32m), "uint32")
%!assert (class (ui64m), "uint64")

%!assert (class (double (sm)), "double")
%!assert (class (double (sbm)), "double")
%!assert (class (double (scm)), "double")

%!assert (class (logical (sm)), "logical")
%!assert (class (logical (sbm)), "logical")
%!assert (class (logical (scm)), "logical")

%!assert (class (double (dq)), "double")
%!assert (class (single (dq)), "single")
%!assert (class (int8 (dq)), "int8")
%!assert (class (int16 (dq)), "int16")
%!assert (class (int32 (dq)), "int32")
%!assert (class (int64 (dq)), "int64")
%!assert (class (uint8 (dq)), "uint8")
%!assert (class (uint16 (dq)), "uint16")
%!assert (class (uint32 (dq)), "uint32")
%!assert (class (uint64 (dq)), "uint64")

%!assert (class (double (sq)), "double")
%!assert (class (single (sq)), "single")
%!assert (class (int8 (sq)), "int8")
%!assert (class (int16 (sq)), "int16")
%!assert (class (int32 (sq)), "int32")
%!assert (class (int64 (sq)), "int64")
%!assert (class (uint8 (sq)), "uint8")
%!assert (class (uint16 (sq)), "uint16")
%!assert (class (uint32 (sq)), "uint32")
%!assert (class (uint64 (sq)), "uint64")

%!assert (class (logical (cs)), "logical")
%!assert (class (double (cs)), "double")
%!assert (class (single (cs)), "single")

%!assert (class (logical (cm)), "logical")
%!assert (class (double (cm)), "double")
%!assert (class (single (cm)), "single")

%!assert (class (logical (fcs)), "logical")
%!assert (class (double (fcs)), "double")
%!assert (class (single (fcs)), "single")

%!assert (class (logical (fcm)), "logical")
%!assert (class (double (fcm)), "double")
%!assert (class (single (fcm)), "single")

%!assert (class (logical (cdm)), "logical")
%!assert (class (double (cdm)), "double")
%!assert (class (single (cdm)), "single")

%!assert (class (logical (fcdm)), "logical")
%!assert (class (double (fcdm)), "double")
%!assert (class (single (fcdm)), "single")

%!assert (class (logical (b)), "logical")
%!assert (class (double (b)), "double")
%!assert (class (single (b)), "single")
%!assert (class (int8 (b)), "int8")
%!assert (class (int16 (b)), "int16")
%!assert (class (int32 (b)), "int32")
%!assert (class (int64 (b)), "int64")
%!assert (class (uint8 (b)), "uint8")
%!assert (class (uint16 (b)), "uint16")
%!assert (class (uint32 (b)), "uint32")
%!assert (class (uint64 (b)), "uint64")

%!assert (class (logical (bm)), "logical")
%!assert (class (double (bm)), "double")
%!assert (class (single (bm)), "single")
%!assert (class (int8 (bm)), "int8")
%!assert (class (int16 (bm)), "int16")
%!assert (class (int32 (bm)), "int32")
%!assert (class (int64 (bm)), "int64")
%!assert (class (uint8 (bm)), "uint8")
%!assert (class (uint16 (bm)), "uint16")
%!assert (class (uint32 (bm)), "uint32")
%!assert (class (uint64 (bm)), "uint64")

%!assert (class (logical (r)), "logical")
%!assert (class (double (r)), "double")
%!assert (class (single (r)), "single")
%!assert (class (int8 (r)), "int8")
%!assert (class (int16 (r)), "int16")
%!assert (class (int32 (r)), "int32")
%!assert (class (int64 (r)), "int64")
%!assert (class (uint8 (r)), "uint8")
%!assert (class (uint16 (r)), "uint16")
%!assert (class (uint32 (r)), "uint32")
%!assert (class (uint64 (r)), "uint64")

%!assert (class (logical (s)), "logical")
%!assert (class (double (s)), "double")
%!assert (class (single (s)), "single")
%!assert (class (int8 (s)), "int8")
%!assert (class (int16 (s)), "int16")
%!assert (class (int32 (s)), "int32")
%!assert (class (int64 (s)), "int64")
%!assert (class (uint8 (s)), "uint8")
%!assert (class (uint16 (s)), "uint16")
%!assert (class (uint32 (s)), "uint32")
%!assert (class (uint64 (s)), "uint64")

%!assert (class (logical (m)), "logical")
%!assert (class (double (m)), "double")
%!assert (class (single (m)), "single")
%!assert (class (int8 (m)), "int8")
%!assert (class (int16 (m)), "int16")
%!assert (class (int32 (m)), "int32")
%!assert (class (int64 (m)), "int64")
%!assert (class (uint8 (m)), "uint8")
%!assert (class (uint16 (m)), "uint16")
%!assert (class (uint32 (m)), "uint32")
%!assert (class (uint64 (m)), "uint64")

%!assert (class (logical (fs)), "logical")
%!assert (class (double (fs)), "double")
%!assert (class (single (fs)), "single")
%!assert (class (int8 (fs)), "int8")
%!assert (class (int16 (fs)), "int16")
%!assert (class (int32 (fs)), "int32")
%!assert (class (int64 (fs)), "int64")
%!assert (class (uint8 (fs)), "uint8")
%!assert (class (uint16 (fs)), "uint16")
%!assert (class (uint32 (fs)), "uint32")
%!assert (class (uint64 (fs)), "uint64")

%!assert (class (logical (fm)), "logical")
%!assert (class (double (fm)), "double")
%!assert (class (single (fm)), "single")
%!assert (class (int8 (fm)), "int8")
%!assert (class (int16 (fm)), "int16")
%!assert (class (int32 (fm)), "int32")
%!assert (class (int64 (fm)), "int64")
%!assert (class (uint8 (fm)), "uint8")
%!assert (class (uint16 (fm)), "uint16")
%!assert (class (uint32 (fm)), "uint32")
%!assert (class (uint64 (fm)), "uint64")

%!assert (class (logical (dm)), "logical")
%!assert (class (double (dm)), "double")
%!assert (class (single (dm)), "single")
%!assert (class (int8 (dm)), "int8")
%!assert (class (int16 (dm)), "int16")
%!assert (class (int32 (dm)), "int32")
%!assert (class (int64 (dm)), "int64")
%!assert (class (uint8 (dm)), "uint8")
%!assert (class (uint16 (dm)), "uint16")
%!assert (class (uint32 (dm)), "uint32")
%!assert (class (uint64 (dm)), "uint64")

%!assert (class (logical (fdm)), "logical")
%!assert (class (double (fdm)), "double")
%!assert (class (single (fdm)), "single")
%!assert (class (int8 (fdm)), "int8")
%!assert (class (int16 (fdm)), "int16")
%!assert (class (int32 (fdm)), "int32")
%!assert (class (int64 (fdm)), "int64")
%!assert (class (uint8 (fdm)), "uint8")
%!assert (class (uint16 (fdm)), "uint16")
%!assert (class (uint32 (fdm)), "uint32")
%!assert (class (uint64 (fdm)), "uint64")

%!assert (class (logical (pm)), "logical")
%!assert (class (double (pm)), "double")
%!assert (class (single (pm)), "single")
%!assert (class (int8 (pm)), "int8")
%!assert (class (int16 (pm)), "int16")
%!assert (class (int32 (pm)), "int32")
%!assert (class (int64 (pm)), "int64")
%!assert (class (uint8 (pm)), "uint8")
%!assert (class (uint16 (pm)), "uint16")
%!assert (class (uint32 (pm)), "uint32")
%!assert (class (uint64 (pm)), "uint64")

%!assert (class (logical (i8s)), "logical")
%!assert (class (double (i8s)), "double")
%!assert (class (single (i8s)), "single")
%!assert (class (int8 (i8s)), "int8")
%!assert (class (int16 (i8s)), "int16")
%!assert (class (int32 (i8s)), "int32")
%!assert (class (int64 (i8s)), "int64")
%!assert (class (uint8 (i8s)), "uint8")
%!assert (class (uint16 (i8s)), "uint16")
%!assert (class (uint32 (i8s)), "uint32")
%!assert (class (uint64 (i8s)), "uint64")

%!assert (class (logical (i16s)), "logical")
%!assert (class (double (i16s)), "double")
%!assert (class (single (i16s)), "single")
%!assert (class (int8 (i16s)), "int8")
%!assert (class (int16 (i16s)), "int16")
%!assert (class (int32 (i16s)), "int32")
%!assert (class (int64 (i16s)), "int64")
%!assert (class (uint8 (i16s)), "uint8")
%!assert (class (uint16 (i16s)), "uint16")
%!assert (class (uint32 (i16s)), "uint32")
%!assert (class (uint64 (i16s)), "uint64")

%!assert (class (logical (i32s)), "logical")
%!assert (class (double (i32s)), "double")
%!assert (class (single (i32s)), "single")
%!assert (class (int8 (i32s)), "int8")
%!assert (class (int16 (i32s)), "int16")
%!assert (class (int32 (i32s)), "int32")
%!assert (class (int64 (i32s)), "int64")
%!assert (class (uint8 (i32s)), "uint8")
%!assert (class (uint16 (i32s)), "uint16")
%!assert (class (uint32 (i32s)), "uint32")
%!assert (class (uint64 (i32s)), "uint64")

%!assert (class (logical (i64s)), "logical")
%!assert (class (double (i64s)), "double")
%!assert (class (single (i64s)), "single")
%!assert (class (int8 (i64s)), "int8")
%!assert (class (int16 (i64s)), "int16")
%!assert (class (int32 (i64s)), "int32")
%!assert (class (int64 (i64s)), "int64")
%!assert (class (uint8 (i64s)), "uint8")
%!assert (class (uint16 (i64s)), "uint16")
%!assert (class (uint32 (i64s)), "uint32")
%!assert (class (uint64 (i64s)), "uint64")

%!assert (class (logical (i8m)), "logical")
%!assert (class (double (i8m)), "double")
%!assert (class (single (i8m)), "single")
%!assert (class (int8 (i8m)), "int8")
%!assert (class (int16 (i8m)), "int16")
%!assert (class (int32 (i8m)), "int32")
%!assert (class (int64 (i8m)), "int64")
%!assert (class (uint8 (i8m)), "uint8")
%!assert (class (uint16 (i8m)), "uint16")
%!assert (class (uint32 (i8m)), "uint32")
%!assert (class (uint64 (i8m)), "uint64")

%!assert (class (logical (i16m)), "logical")
%!assert (class (double (i16m)), "double")
%!assert (class (single (i16m)), "single")
%!assert (class (int8 (i16m)), "int8")
%!assert (class (int16 (i16m)), "int16")
%!assert (class (int32 (i16m)), "int32")
%!assert (class (int64 (i16m)), "int64")
%!assert (class (uint8 (i16m)), "uint8")
%!assert (class (uint16 (i16m)), "uint16")
%!assert (class (uint32 (i16m)), "uint32")
%!assert (class (uint64 (i16m)), "uint64")

%!assert (class (logical (i32m)), "logical")
%!assert (class (double (i32m)), "double")
%!assert (class (single (i32m)), "single")
%!assert (class (int8 (i32m)), "int8")
%!assert (class (int16 (i32m)), "int16")
%!assert (class (int32 (i32m)), "int32")
%!assert (class (int64 (i32m)), "int64")
%!assert (class (uint8 (i32m)), "uint8")
%!assert (class (uint16 (i32m)), "uint16")
%!assert (class (uint32 (i32m)), "uint32")
%!assert (class (uint64 (i32m)), "uint64")

%!assert (class (logical (i64m)), "logical")
%!assert (class (double (i64m)), "double")
%!assert (class (single (i64m)), "single")
%!assert (class (int8 (i64m)), "int8")
%!assert (class (int16 (i64m)), "int16")
%!assert (class (int32 (i64m)), "int32")
%!assert (class (int64 (i64m)), "int64")
%!assert (class (uint8 (i64m)), "uint8")
%!assert (class (uint16 (i64m)), "uint16")
%!assert (class (uint32 (i64m)), "uint32")
%!assert (class (uint64 (i64m)), "uint64")

%!assert (class (logical (ui8s)), "logical")
%!assert (class (double (ui8s)), "double")
%!assert (class (single (ui8s)), "single")
%!assert (class (int8 (ui8s)), "int8")
%!assert (class (int16 (ui8s)), "int16")
%!assert (class (int32 (ui8s)), "int32")
%!assert (class (int64 (ui8s)), "int64")
%!assert (class (uint8 (ui8s)), "uint8")
%!assert (class (uint16 (ui8s)), "uint16")
%!assert (class (uint32 (ui8s)), "uint32")
%!assert (class (uint64 (ui8s)), "uint64")

%!assert (class (logical (ui16s)), "logical")
%!assert (class (double (ui16s)), "double")
%!assert (class (single (ui16s)), "single")
%!assert (class (int8 (ui16s)), "int8")
%!assert (class (int16 (ui16s)), "int16")
%!assert (class (int32 (ui16s)), "int32")
%!assert (class (int64 (ui16s)), "int64")
%!assert (class (uint8 (ui16s)), "uint8")
%!assert (class (uint16 (ui16s)), "uint16")
%!assert (class (uint32 (ui16s)), "uint32")
%!assert (class (uint64 (ui16s)), "uint64")

%!assert (class (logical (ui32s)), "logical")
%!assert (class (double (ui32s)), "double")
%!assert (class (single (ui32s)), "single")
%!assert (class (int8 (ui32s)), "int8")
%!assert (class (int16 (ui32s)), "int16")
%!assert (class (int32 (ui32s)), "int32")
%!assert (class (int64 (ui32s)), "int64")
%!assert (class (uint8 (ui32s)), "uint8")
%!assert (class (uint16 (ui32s)), "uint16")
%!assert (class (uint32 (ui32s)), "uint32")
%!assert (class (uint64 (ui32s)), "uint64")

%!assert (class (logical (ui64s)), "logical")
%!assert (class (double (ui64s)), "double")
%!assert (class (single (ui64s)), "single")
%!assert (class (int8 (ui64s)), "int8")
%!assert (class (int16 (ui64s)), "int16")
%!assert (class (int32 (ui64s)), "int32")
%!assert (class (int64 (ui64s)), "int64")
%!assert (class (uint8 (ui64s)), "uint8")
%!assert (class (uint16 (ui64s)), "uint16")
%!assert (class (uint32 (ui64s)), "uint32")
%!assert (class (uint64 (ui64s)), "uint64")

%!assert (class (logical (ui8m)), "logical")
%!assert (class (double (ui8m)), "double")
%!assert (class (single (ui8m)), "single")
%!assert (class (int8 (ui8m)), "int8")
%!assert (class (int16 (ui8m)), "int16")
%!assert (class (int32 (ui8m)), "int32")
%!assert (class (int64 (ui8m)), "int64")
%!assert (class (uint8 (ui8m)), "uint8")
%!assert (class (uint16 (ui8m)), "uint16")
%!assert (class (uint32 (ui8m)), "uint32")
%!assert (class (uint64 (ui8m)), "uint64")

%!assert (class (logical (ui16m)), "logical")
%!assert (class (double (ui16m)), "double")
%!assert (class (single (ui16m)), "single")
%!assert (class (int8 (ui16m)), "int8")
%!assert (class (int16 (ui16m)), "int16")
%!assert (class (int32 (ui16m)), "int32")
%!assert (class (int64 (ui16m)), "int64")
%!assert (class (uint8 (ui16m)), "uint8")
%!assert (class (uint16 (ui16m)), "uint16")
%!assert (class (uint32 (ui16m)), "uint32")
%!assert (class (uint64 (ui16m)), "uint64")

%!assert (class (logical (ui32m)), "logical")
%!assert (class (double (ui32m)), "double")
%!assert (class (single (ui32m)), "single")
%!assert (class (int8 (ui32m)), "int8")
%!assert (class (int16 (ui32m)), "int16")
%!assert (class (int32 (ui32m)), "int32")
%!assert (class (int64 (ui32m)), "int64")
%!assert (class (uint8 (ui32m)), "uint8")
%!assert (class (uint16 (ui32m)), "uint16")
%!assert (class (uint32 (ui32m)), "uint32")
%!assert (class (uint64 (ui32m)), "uint64")

%!assert (class (logical (ui64m)), "logical")
%!assert (class (double (ui64m)), "double")
%!assert (class (single (ui64m)), "single")
%!assert (class (int8 (ui64m)), "int8")
%!assert (class (int16 (ui64m)), "int16")
%!assert (class (int32 (ui64m)), "int32")
%!assert (class (int64 (ui64m)), "int64")
%!assert (class (uint8 (ui64m)), "uint8")
%!assert (class (uint16 (ui64m)), "uint16")
%!assert (class (uint32 (ui64m)), "uint32")
%!assert (class (uint64 (ui64m)), "uint64")
